/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(balanceOf) eq getBalance jumpi
    dup1 __FUNC_SIG(withdraw) eq withdrawJump jumpi
    callvalue iszero end jumpi

    caller 0x00 mstore
    0x20 0x00 sha3          // [hash_address]
    dup1 sload              // [balance[user], hash_address]
    callvalue add           // [value+balance[user], hash_address]
    swap1 sstore            // []
    0x00 0x00 return

    getBalance:
        caller 0x00 mstore  // []
        0x20 0x00 sha3      // [hash_address]
        sload               // [balance[user]]
        0x00 mstore         // []
        0x20 0x00 return

    withdrawJump:
        caller 0x00 mstore          // []
        0x20 0x00 sha3              // [hash_address]
        dup1 sload                  // [balance[user], hash_address]
        0x04 calldataload           // [amount, balance[user], hash_address]
        dup2 dup2                   // [amount, balance[user], amount, balance[user], hash_address]
        gt errorBalance jumpi       // [amount, balance[user], hash_address]
        dup1 swap2                  // [balance[user], amount, amount, hash_address]
        sub swap1 swap2             // [hash_address, balance[user]-amount, amount]
        sstore                      // [amount]
        0x00 0x00 0x00 0x32         // [retLen, argOst, argLen, retOst, amount]
        swap4                       // [amount, argOst, argLen, retOst, retLen]
        caller gas                  // [gas, to, amount, argOst, argLen, retOst, retLen]
        call                        // []
        0x00 0x00 return


    errorBalance:
        0x00 dup1 revert
        

    end:
        0x00 0x00 return
}
