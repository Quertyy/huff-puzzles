
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(maxOfArray) eq maxJump jumpi
    0x00 dup1 revert

    maxJump:
        0x00                            // [max]
        0x24 calldataload               // [values.length, max]
        dup1 iszero error jumpi
        0x04 0x40 add                   // [&values, values.length, max]
        swap1                           // [values.length, &values, max]

        // loop over the array
        0x00                            // [i, values.length, &values, max]
        loop:
            dup2 dup2                   // [i, values.length, i, values.length, &values, max]
            // Exit loop if finished
            eq exit jumpi               // [i, values.length, &values, max]
            swap2                       // [&values, values.length, i, max]
            dup1                        // [&values, &values, values.length, i, max]
            calldataload                // [values[i], &values, values.length, i, max]
            swap1 0x20 add              // [&values++, values[i], values.length, i, max]
            swap4                       // [max, values[i], values.length, i, &values++]
            dup2 dup2                   // [max, values[i], max, values[i], values.length, i, &values++]

            gt                          // [max>values[i], max, values[i], values.length, i, &values++]
            new jumpi                   // [max, values[i], values.length, i, &values++]
            
            continue:
                pop                         // [max, values.length, i, &values++]
                swap3 swap2                 // [i, values.length, &values++, new_max]

                0x01 add                     // [i++, values.length, &values++, new_max]
                loop jump
        exit:
        pop pop pop                     // [max]
        0x00 mstore
        0x20 0x00 return

        new:                        // [max, values[i], values.length, i, &values++]
            swap1                   // [values[i], max, values.length, i, &values++]
            continue jump
        
        error:
            0x00 dup1 revert
}