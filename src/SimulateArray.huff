
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define constant ARRAY = FREE_STORAGE_POINTER()

 #define macro PUSH() = takes(0) returns (0) {
    0x04 calldataload           // [num]
    [ARRAY]                     // [ptr, num]
    dup1 sload                  // [length, ptr, num]
    swap1 dup2                  // [length, ptr, length, num]
    0x01 add                    // [length++, ptr, length, num]
    dup2                        // [ptr, length++, ptr, length, num]
    sstore                      // [ptr, length, num]
    0x20 swap1                  // [ptr, 32, length, num]
    sha3                        // [&arr, length, num]
    swap1 0x20 mul              // [32*length, &arr, num]
    add                         // [&arr[lastValue], num]
    sstore                      // []

    0x20 0x00 return
 }
 
 #define macro POP() = takes(0) returns(0) {
    [ARRAY]                     // [ptr]
    dup1 sload                  // [length, ptr]
    dup1 iszero error jumpi     // [length, ptr]
    0x01 dup2 sub               // [length--, length, ptr]
    dup3 sstore                 // [length, ptr]
    swap1 0x20 swap1            // [ptr, 32, length]
    sha3                        // [&arr, length]
    swap1 0x20 mul              // [32*length, &arr]
    add                         // [&arr[lastValue]]
    0x00 swap1 sstore           // []
    0x20 0x00 return

    error:
        __ERROR(ZeroArray)
        0x00 mstore
        0x04 0x00 revert
 }
// e583
 #define macro READ() = takes(0) returns(0) {
    0x04 calldataload               // [index]
    [ARRAY]                         // [ptr, index]
    dup1                            // [ptr, ptr, index]
    sload                           // [length, ptr, index]
    dup3 0x01 add                   // [index++, length, ptr, index]
    gt error jumpi                  // [ptr, index]
    0x20 swap1                      // [ptr, 32, index]
    sha3                            // [&arr, index]
    swap1 0x20 mul                  // [32*index, &arr]
    add sload                       // [arr[index]]
    0x00 mstore                     // []
    0x20 0x00 return

    error:
        __ERROR(OutOfBounds)
        0x00 mstore
        0x04 0x00 revert
 }
 
 #define macro LENGTH() = takes(0) returns(0) {
    [ARRAY]                         // [ptr]
    sload                           // [length]
    0x00 mstore                     // []
    0x20 0x00 return
 }

 #define macro WRITE() = takes(0) returns(0) {
    0x24 calldataload               // [num]
    0x04 calldataload               // [index, num]
    [ARRAY]                         // [ptr, index, num]
    dup1                            // [ptr, ptr, index, num]
    sload                           // [length, ptr, index, num]
    dup3                            // [index, length, ptr, index, num]
    0x01 add                        // [index++, length, ptr, index, num]
    gt error jumpi                  // [ptr, index, num]
    0x20 swap1                      // [ptr, 32, index, num]
    sha3                            // [&arr, index, num]
    swap1 0x20 mul                  // [32*index, &arr, num]
    add                             // [&arr[index], num]
    sstore
    0x20 0x00 return

    error:
        __ERROR(OutOfBounds)
        0x00 mstore
        0x04 0x00 revert
 }  

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(pushh) eq pushJump jumpi
    dup1 __FUNC_SIG(popp) eq popJump jumpi
    dup1 __FUNC_SIG(read) eq readJump jumpi
    dup1 __FUNC_SIG(length) eq lengthJump jumpi
    dup1 __FUNC_SIG(write) eq writeJump jumpi
    0x00 dup1 revert

    
    popJump:
        POP()
    readJump:
        READ()
    lengthJump:
        LENGTH()
    writeJump:
        WRITE()
    pushJump:
        PUSH()
 }